import telebot
import cv2
import numpy as np
import requests
from telebot import types
import re
import sqlite3
import uuid
import requests
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import io
from email.mime.image import MIMEImage
import base64
import os
from dotenv import load_dotenv
load_dotenv()

count = 0
bot = telebot.TeleBot(os.getenv("TELEGRAM_TOKEN"))
user_categories = {}
active_apps = {}
user_photos = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î

flag_country = [
    ("üá∑üá∫ –†–æ—Å—Å–∏—è", "rus"), ("üá∫üá∏ –°–®–ê", "usa"), ("üá™üá∏ –ò—Å–ø–∞–Ω–∏—è", "esp"), ("üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "fr"),
    ("üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è", "port"), ("üáπüá∑ –¢—É—Ä—Ü–∏—è", "tur"), ("üáªüá≥ –í—å–µ—Ç–Ω–∞–º", "viet"), ("üá®üá≥ –ö–∏—Ç–∞–π", "chi"),
    ("üá¶üá™ –û–ê–≠", "arab"), ("üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è", "arm")
]

country_mapping = {
    "rus": "–†–æ—Å—Å–∏—è", "usa": "–°–®–ê", "esp": "–ò—Å–ø–∞–Ω–∏—è", "fr": "–§—Ä–∞–Ω—Ü–∏—è",
    "port": "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è", "tur": "–¢—É—Ä—Ü–∏—è", "viet": "–í—å–µ—Ç–Ω–∞–º", "chi": "–ö–∏—Ç–∞–π",
    "arab": "–û–ê–≠", "arm": "–ê—Ä–º–µ–Ω–∏—è"
}

categor = [
    ("A", "A"), ("A1", "A1"), ("B", "B"), ("C", "C"), ("D", "D"),
    ("BE", "BE"), ("CE", "CE"), ("DE", "DE"), ("B1", "B1"), 
    ("M", "M"), ("D1E", "D1E"), ("C1E", "C1E")
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
EMAIL_CONFIG = {
    'smtp_server': 'smtp.gmail.com',
    'smtp_port': 587,
    'email': os.getenv("EMAIL_USER"),
    'password': os.getenv("EMAIL_PASSWORD"),
    'use_ssl': True
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞—è–≤–æ–∫ —Å –ø–æ–ª–µ–º –¥–ª—è —Ñ–æ—Ç–æ
cursor.execute('''CREATE TABLE IF NOT EXISTS applications (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id BIGINT,
    fio TEXT,
    date_birth TEXT,
    country TEXT,
    categories TEXT,
    license_number TEXT,
    license_issue_date TEXT,
    email TEXT,
    photo_blob BLOB,
    photo_format TEXT,
    status TEXT DEFAULT 'draft',
    payment_method TEXT,
    payment_status TEXT DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)''')
conn.commit()


def pay_yookassa(message, amount=1000):
    """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa """
    try:
        shop_id = "key_id"  # Shop ID –∏–∑ –ÆKassa
        secret_key = "key"  # Secret Key –∏–∑ –ÆKassa
        
        order_id = str(uuid.uuid4())
        
        headers = {
            "Content-Type": "application/json",
            "Idempotence-Key": order_id
        }
        
        data = {
            "amount": {
                "value": str(amount),
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/@IntAuto_bot"  
            },
            "capture": True,
            "description": f"–û–ø–ª–∞—Ç–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è"
        }
        
        response = requests.post(
            "https://api.yookassa.ru/v3/payments",
            auth=(shop_id, secret_key),
            headers=headers,
            json=data,
            timeout=10
        )
        
        payment = response.json()
        if "confirmation" in payment:
            url = payment["confirmation"]["confirmation_url"]
            user_id = message.from_user.id
            update_application(user_id, "payment_method", "yookassa")
            update_application(user_id, "payment_status", "waiting")
            
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='check_payment')
            markup.add(btn)
            
            bot.send_message(message.chat.id, 
                           f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–±.\n"
                           f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {url}\n"
                           f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                           reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ÆKassa: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

def pay_lava(message, amount=1000):
    """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Lava (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π)"""
    try:
        # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï!
        api_key = "key"
        shop_id = "key"
        order_id = str(uuid.uuid4())
        
        data = {
            "shopId": shop_id,
            "amount": amount,
            "orderId": order_id,
            "currency": "RUB",
            "returnUrl": f"https://t.me/@IntAuto_bot"
        }
        
        headers = {"Authorization": f"Bearer {api_key}"}
        
        response = requests.post("https://api.lava.ru/invoice", json=data, headers=headers, timeout=10)
        result = response.json()
        
        if "url" in result:
            user_id = message.from_user.id
            update_application(user_id, "payment_method", "lava")
            update_application(user_id, "payment_status", "waiting")
            
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='check_payment')
            markup.add(btn)
            
            bot.send_message(message.chat.id, 
                           f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–±.\n"
                           f"üîó –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {result['url']}\n"
                           f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                           reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Lava: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

def simulate_payment(message, amount=1000):
    """–°–∏–º—É–ª—è—Ü–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—É–¥–∞–ª–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)"""
    user_id = message.from_user.id
    update_application(user_id, "payment_method", "test")
    update_application(user_id, "payment_status", "completed")
    update_application(user_id, "status", "paid")
    
    bot.send_message(message.chat.id, 
                   "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                   "üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
                   "‚è≥ –°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è")

    
def create_new_application(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë ID"""
    cursor.execute("INSERT INTO applications (user_id, status) VALUES (?, 'draft')", (user_id,))
    conn.commit()
    app_id = cursor.lastrowid
    active_apps[user_id] = app_id
    user_categories[user_id] = []
    return app_id

def update_application(user_id, field, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    app_id = active_apps.get(user_id)
    if app_id:
        cursor.execute(f"UPDATE applications SET {field} = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?", 
                      (value, app_id))
        conn.commit()

def save_photo_to_db(user_id, image_data, format='jpeg'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    app_id = active_apps.get(user_id)
    if app_id:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
            if isinstance(image_data, np.ndarray):
                # –ï—Å–ª–∏ —ç—Ç–æ numpy array (–ø–æ—Å–ª–µ OpenCV –æ–±—Ä–∞–±–æ—Ç–∫–∏)
                success, encoded_image = cv2.imencode(f'.{format}', image_data)
                if success:
                    photo_bytes = encoded_image.tobytes()
                else:
                    return False
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –±–∞–π—Ç—ã
                photo_bytes = image_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("UPDATE applications SET photo_blob = ?, photo_format = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?", 
                          (photo_bytes, format, app_id))
            conn.commit()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –ë–î: {e}")
            return False
    return False

def get_photo_from_db(app_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        cursor.execute("SELECT photo_blob, photo_format FROM applications WHERE id = ?", (app_id,))
        result = cursor.fetchone()
        if result and result[0]:
            return result[0], result[1]  # blob_data, format
        return None, None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ –ë–î: {e}")
        return None, None

def send_confirmation_email(email, user_data, photo_data=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ email —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏ –∏ —Ñ–æ—Ç–æ"""
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_CONFIG['email']
        msg['To'] = email
        msg['Subject'] = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ'
        
        body = f"""
        –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {user_data['fio']},
        
        –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!
        
        –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:
        - –§–ò–û: {user_data['fio']}
        - –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['date_birth']}
        - –°—Ç—Ä–∞–Ω–∞: {user_data['country']}
        - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {user_data['categories']}
        - –ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏: {user_data['license_number']}
        - –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {user_data['license_issue_date']}
        
        –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ
        –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        
        –ü–æ—Å–ª–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        """
        
        msg.attach(MIMEText(body, 'plain'))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ –∫ –ø–∏—Å—å–º—É
        if photo_data:
            try:
                photo_bytes, photo_format = photo_data
                attachment = MIMEImage(photo_bytes, _subtype=photo_format)
                attachment.add_header('Content-Disposition', 'attachment', filename=f'photo.{photo_format}')
                msg.attach(attachment)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫ email: {e}")
        
        server = smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port'])
        server.starttls()
        server.login(EMAIL_CONFIG['email'], EMAIL_CONFIG['password'])
        server.send_message(msg)
        server.quit()
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        return False

@bot.message_handler(commands=['start'])
def start(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    

    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
    create_new_application(user_id)
    
    with open('Intro.txt', 'r', encoding='utf-8') as file:
        text = file.read()
    
    bot.send_message(message.chat.id, text)
    bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º"
                     "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: jpeg, png;\n–¶–≤–µ—Ç —Ñ–æ–Ω–∞: –±–µ–ª—ã–π, –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π;\n"
                     "–†–∞–∑–º–µ—Ä: –Ω–µ –º–µ–Ω—å—à–µ 400 x 500px.")
    bot.register_next_step_handler(message, handle_photo)

def handle_photo(message):
    global count
    count += 1
    
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        bot.register_next_step_handler(message, start)
        return
        
    if not message.photo:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, handle_photo)
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à—É—é –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_info = bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
    try:
        response = requests.get(file_url, timeout=10)  
        img_array = np.frombuffer(response.content, np.uint8)
        img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–π—Ç—ã —Ñ–æ—Ç–æ
        original_photo_bytes = response.content
        
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        bot.register_next_step_handler(message, handle_photo)
        return

    if img is None:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ JPEG –∏–ª–∏ PNG.")
        bot.register_next_step_handler(message, handle_photo)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    h, w = img.shape[:2]
    cropped_img = None
    
    if w < 400 or h < 500:
        bot.send_message(message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ –∫—Ä–æ–ø–Ω—É—Ç–æ –¥–æ 500x400.")
        x_center = w // 2
        y_center = h // 2
        x_start = max(0, x_center - 200)
        y_start = max(0, y_center - 250)
        cropped_img = img[y_start:y_start+500, x_start:x_start+400]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–æ–ø–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_id = message.from_user.id
        user_photos[user_id] = cropped_img
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é preview
        success, encoded_image = cv2.imencode('.jpg', cropped_img)
        if success:
            photo_bytes = encoded_image.tobytes()
            bot.send_photo(message.chat.id, photo_bytes, caption="–í–æ—Ç –≤–∞—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_id = message.from_user.id
        user_photos[user_id] = original_photo_bytes
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 250, 255, cv2.THRESH_BINARY)
    white_ratio = np.sum(thresh == 255) / (w * h)
    
    if white_ratio < 0.3:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–ª—ã–º –∏–ª–∏ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–º.")
        bot.register_next_step_handler(message, handle_photo)
        return
    
    bot.send_message(message.chat.id, "–§–æ—Ç–æ –ø—Ä–æ—à–ª–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚úÖ")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_restart = types.KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    markup.add(btn_restart)
    
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û", reply_markup=markup)
    bot.register_next_step_handler(message, f_fio)

def f_fio(message):
    user_id = message.from_user.id
    
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        create_new_application(user_id)
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
        bot.register_next_step_handler(message, handle_photo)
        return
    
    fio = message.text.split()
    if len(fio) == 3:
        fio_str = " ".join(fio)
        update_application(user_id, "fio", fio_str)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –§–ò–û
        if user_id in user_photos:
            photo_data = user_photos[user_id]
            if isinstance(photo_data, np.ndarray):
                # –≠—Ç–æ –∫—Ä–æ–ø–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (numpy array)
                save_photo_to_db(user_id, photo_data, 'jpeg')
            else:
                # –≠—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–π—Ç—ã
                save_photo_to_db(user_id, photo_data, 'jpeg')
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del user_photos[user_id]

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
        bot.register_next_step_handler(message, dateBirth)   
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
        bot.register_next_step_handler(message, f_fio)

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (dateBirth, handle_country_selection, handle_categories, countryChoose) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
def dateBirth(message):
    user_id = message.from_user.id
    
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        create_new_application(user_id)
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º"
                     "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: jpeg, png;\n–¶–≤–µ—Ç —Ñ–æ–Ω–∞: –±–µ–ª—ã–π, –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π;\n"
                     "–†–∞–∑–º–µ—Ä: –Ω–µ –º–µ–Ω—å—à–µ 400 x 500px.")
        bot.register_next_step_handler(message, handle_photo)
        return
        
    date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"
    
    if re.fullmatch(date_pattern, message.text):
        update_application(user_id, "date_birth", message.text)
        
        markup = types.InlineKeyboardMarkup()
        for i in range(0, len(flag_country), 3):
            markup.row(*[types.InlineKeyboardButton(text, callback_data=data) for text, data in flag_country[i:i+3]])
             
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=markup)
        
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        bot.register_next_step_handler(message, dateBirth)

@bot.callback_query_handler(func=lambda callback: callback.data in [i[1] for i in flag_country])
def handle_country_selection(callback):
    user_id = callback.from_user.id
    country_code = callback.data
    print(callback.data)
    # –ù–∞—Ö–æ–¥–∏–º emoji —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É
    country_emoji = next((text for text, data in flag_country if data == country_code), "üåç")
    
    update_application(user_id, "country", country_code)
    bot.send_message(callback.message.chat.id, f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {country_emoji}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    markup = types.InlineKeyboardMarkup()
    for i in range(0, len(categor), 4):
        markup.row(*[types.InlineKeyboardButton(text, callback_data=text) for text, _ in categor[i:i+4]])
    markup.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_categories"))
    
    bot.send_message(callback.message.chat.id, 
                    "–û—Ç–º–µ—Ç—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è",
                    reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data in [i[0] for i in categor] + ["done_categories"])
def handle_categories(callback):
    user_id = callback.from_user.id

    if callback.data == "done_categories":
        if user_id in user_categories and user_categories[user_id]:
            cats = ", ".join(user_categories[user_id])
            update_application(user_id, "categories", cats)
            bot.send_message(callback.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cats}")
            bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–û–ú–ï–† –î–î.–ú–ú.–ì–ì–ì–ì).")
        else:
            bot.send_message(callback.message.chat.id, "–í—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π!")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏
    category = callback.data
    if user_id not in user_categories:
        user_categories[user_id] = []
    if category not in user_categories[user_id]:
        user_categories[user_id].append(category)

    bot.answer_callback_query(callback.id, f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}")

@bot.message_handler(func=lambda message: True)
def handle_license_info(message):
    user_id = message.from_user.id
    
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        create_new_application(user_id)
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º"
                     "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: jpeg, png;\n–¶–≤–µ—Ç —Ñ–æ–Ω–∞: –±–µ–ª—ã–π, –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π;\n"
                     "–†–∞–∑–º–µ—Ä: –Ω–µ –º–µ–Ω—å—à–µ 400 x 500px.")
        bot.register_next_step_handler(message, handle_photo)
        return
    
    # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏
    parts = message.text.split()
    if len(parts) >= 2:
        license_number = parts[0]
        license_date = " ".join(parts[1:])
        
        date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"
        
        if len(license_number) >= 5 and re.fullmatch(date_pattern, license_date):
            update_application(user_id, "license_number", license_number)
            update_application(user_id, "license_issue_date", license_date)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∞ –ÆKassa', callback_data='yookassa')
            btn2 = types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∞ LavaTop', callback_data='lava')
            btn3 = types.InlineKeyboardButton('–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞', callback_data='test_payment')

            btn4 = types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã', callback_data='check_payment')
            markup.row(btn1, btn2, btn3, btn4)

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–û–ú–ï–† –î–î.–ú–ú.–ì–ì–ì–ì).")
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–û–ú–ï–† –î–î.–ú–ú.–ì–ì–ì–ì).")

@bot.callback_query_handler(func=lambda callback: callback.data in ["yookassa", "lava", "test_payment", "check_payment"])
def handle_payment_selection(callback):
    user_id = callback.from_user.id
    
    if callback.data == "yookassa":
        pay_yookassa(callback.message)
    elif callback.data == "lava":
        pay_lava(callback.message)
    elif callback.data == "test_payment":
        simulate_payment(callback.message)
    elif callback.data == "check_payment":
        # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
        bot.send_message(callback.message.chat.id, 
                       "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                       "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:")
        bot.register_next_step_handler(callback.message, process_email_input)

def process_email_input(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
    user_id = message.from_user.id
    
    if message.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        create_new_application(user_id)
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
        bot.register_next_step_handler(message, handle_photo)
        return
    
    email = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(email_pattern, email):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        update_application(user_id, "email", email)
        update_application(user_id, "status", "completed")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        app_id = active_apps.get(user_id)
        if app_id:
            cursor.execute("SELECT fio, date_birth, country, categories, license_number, license_issue_date FROM applications WHERE id = ?", (app_id,))
            app_data = cursor.fetchone()
            
            if app_data:
                user_data = {
                    'fio': app_data[0],
                    'date_birth': app_data[1],
                    'country': app_data[2],
                    'categories': app_data[3],
                    'license_number': app_data[4],
                    'license_issue_date': app_data[5]
                }
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                photo_data = get_photo_from_db(app_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π email —Å —Ñ–æ—Ç–æ
                if send_confirmation_email(email, user_data, photo_data):
                    bot.send_message(message.chat.id, 
                                   "üéâ –ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                   f"üìß –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email: {email}\n"
                                   "üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
                                   "‚è≥ –°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π")
                else:
                    bot.send_message(message.chat.id,
                                   "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                   "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.\n"
                                   "üìû –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        bot.register_next_step_handler(message, process_email_input)

bot.polling(none_stop=True)
